- hosts: all
  connection: httpapi

  tasks:
    - name: Get all domain for Cisco FMC
      cisco.fmcansible.fmc_configuration:
        operation: getAllDomain
        register_as: cra1

    # sanity: ensure network object doesn't exist
    - name: get network object
      cisco.fmcansible.fmc_configuration:
        operation: getAllNetworkObject
        path_params:
          domainUUID: '{{ cra1[0].uuid }}'
        query_params:
          filter: "nameOrValue:ansible-test-upsert-no5"
        register_as: "getObjs"
      register: result
    - assert:
        that:
          - getObjs | length == 0

    # create NetworkObject via upsert
    - name: upsertNetworkObject should create a new network
      cisco.fmcansible.fmc_configuration:
        operation: upsertNetworkObject
        path_params:
          domainUUID: '{{ cra1[0].uuid }}'        
        data:
          name: "ansible-test-upsert-no5"
          description: "Upserted network object"
          value: "3.3.3.0/24"
          type: "networkobject"
        register_as: "upsertedObj"
      register: result
    - assert:
        that:
          - result.changed == true
          - upsertedObj['name'] == "ansible-test-upsert-no5"

    # update NetworkObject via upsert
    - name: upsertNetworkObject should update the existing network object
      cisco.fmcansible.fmc_configuration:
        operation: upsertNetworkObject
        path_params:
          domainUUID: '{{ cra1[0].uuid }}'
        data:
          name: "ansible-test-upsert-no5"
          description: "Ansible Integration tests in action"
          value: "4.4.4.0/24"
          type: "networkobject"
        register_as: "upsertedObj2"
      register: result
    - assert:
        that:
          - result.changed == true
          - upsertedObj2['id'] == upsertedObj['id']
          - upsertedObj2['value'] == "4.4.4.0/24"

    # clean up NetworkObject
    - name: deleteNetworkObject should delete the network object
      cisco.fmcansible.fmc_configuration:
        operation: deleteNetworkObject
        path_params:
          domainUUID: '{{ cra1[0].uuid }}'
          objectId: '{{ upsertedObj.id }}'            
      register: result
    - assert:
        that:
          - result.changed == true
